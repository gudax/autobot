version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: autobot_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-autobot_trading}
      POSTGRES_USER: ${POSTGRES_USER:-autobot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back_office_server/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - autobot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-autobot_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (Optional - for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: autobot_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - autobot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Back Office Server (FastAPI)
  back_office_server:
    build:
      context: ./back_office_server
      dockerfile: Dockerfile
    container_name: autobot_back_office
    restart: unless-stopped
    env_file:
      - ./back_office_server/.env
    volumes:
      - ./back_office_server/app:/app/app:ro
      - ./logs:/var/log/autobot
    ports:
      - "${BACK_OFFICE_PORT:-8000}:8000"
    networks:
      - autobot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Trading Engine
  trading_engine:
    build:
      context: ./trading_engine
      dockerfile: Dockerfile
    container_name: autobot_trading_engine
    restart: unless-stopped
    env_file:
      - ./trading_engine/.env
    environment:
      - BACK_OFFICE_API_URL=http://back_office_server:8000
    volumes:
      - ./trading_engine:/app
      - ./logs:/var/log/autobot
      - ./trading_engine/data:/app/data
    networks:
      - autobot_network
    depends_on:
      back_office_server:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: autobot_nginx
    restart: unless-stopped
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./dashboard/dist:/usr/share/nginx/html:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - autobot_network
    depends_on:
      - back_office_server
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: autobot_prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - autobot_network

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: autobot_grafana
    restart: unless-stopped
    profiles:
      - monitoring
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3001:3000"
    networks:
      - autobot_network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  autobot_network:
    driver: bridge
