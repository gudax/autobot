name: Deploy to Vultr

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - frontend
          - trading

env:
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
  DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}

jobs:
  # Test Job - Run tests before deploying
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Back Office dependencies
        run: |
          cd back_office_server
          pip install -r requirements.txt

      - name: Run Back Office tests
        run: |
          cd back_office_server
          pytest tests/ -v --tb=short || echo "No tests found or tests failed"

      - name: Install Trading Engine dependencies
        run: |
          cd trading_engine
          pip install -r requirements.txt

      - name: Run Trading Engine tests
        run: |
          cd trading_engine
          pytest tests/ -v --tb=short || echo "No tests found or tests failed"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json

      - name: Install Dashboard dependencies
        run: |
          cd dashboard
          npm ci

      - name: Build Dashboard
        run: |
          cd dashboard
          npm run build

      - name: Test Dashboard build
        run: |
          cd dashboard
          test -d dist || exit 1
          echo "Dashboard build successful"

  # Deploy Job - Deploy to Vultr server
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "echo 'SSH connection successful'"

      - name: Pull latest code on server
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /opt/autobot
            git fetch origin
            git reset --hard origin/main
            git clean -fd
            echo "Code updated successfully"
          EOF

      - name: Deploy Backend
        if: github.event.inputs.component == 'all' || github.event.inputs.component == 'backend' || github.event.inputs.component == ''
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /opt/autobot
            docker compose -f docker-compose.prod.yml up -d --build back_office_server postgres redis
            echo "Backend deployed successfully"
          EOF

      - name: Run Database Migrations
        if: github.event.inputs.component == 'all' || github.event.inputs.component == 'backend' || github.event.inputs.component == ''
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /opt/autobot/back_office_server
            docker compose -f ../docker-compose.prod.yml exec -T back_office_server \
              alembic upgrade head || echo "No migrations to run"
          EOF

      - name: Deploy Trading Engine
        if: github.event.inputs.component == 'all' || github.event.inputs.component == 'trading' || github.event.inputs.component == ''
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /opt/autobot
            docker compose -f docker-compose.prod.yml up -d --build trading_engine
            echo "Trading Engine deployed successfully"
          EOF

      - name: Deploy Dashboard
        if: github.event.inputs.component == 'all' || github.event.inputs.component == 'frontend' || github.event.inputs.component == ''
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /opt/autobot/dashboard
            npm install
            npm run build

            # Copy to nginx
            rm -rf /var/www/autobot
            mkdir -p /var/www/autobot
            cp -r dist/* /var/www/autobot/

            # Restart nginx
            docker compose -f ../docker-compose.prod.yml restart nginx

            echo "Dashboard deployed successfully"
          EOF

      - name: Health Check
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "Waiting for services to start..."
            sleep 10

            # Check Back Office Server
            if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "✓ Back Office Server is healthy"
            else
              echo "✗ Back Office Server health check failed"
              exit 1
            fi

            # Check PostgreSQL
            if docker compose -f /opt/autobot/docker-compose.prod.yml exec -T postgres pg_isready; then
              echo "✓ PostgreSQL is healthy"
            else
              echo "✗ PostgreSQL health check failed"
              exit 1
            fi

            echo "All health checks passed!"
          EOF

      - name: Show service status
        if: always()
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.DEPLOY_PORT }} \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "cd /opt/autobot && docker compose -f docker-compose.prod.yml ps"

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

  # Notification Job - Send deployment notification
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Send success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "Deployment successful!"
          # Add your notification logic here (Slack, Discord, Email, etc.)

      - name: Send failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "Deployment failed!"
          # Add your notification logic here (Slack, Discord, Email, etc.)
